-@ val title: String
- import nu.u8.estoril._
- import java.time._
-@ val contents: Seq[Content]
-@ val allTags: Seq[String]
-@ val lang: String
-@ val css: String
-@ val updatedAt: ZonedDateTime
-@ val createdAt: ZonedDateTime
-@ val root: String
-@ val highlighted: Set[String]
- val highlightedJSArray = highlighted.map(lang => "\"" + lang + "\"").mkString("[", ",", "]")
-@ val path: String
-@ val hasIcon: Boolean
!!! XML
!!! 5
html(xmlns='http://www.w3.org/1999/xhtml' lang='ja' xml:lang='ja')
  head
    meta(charset='utf-8')
    meta(name='generator' content='Estoril 0.0.0.10')
    meta(name='viewport' content='width=device-width, initial-scale=1.0, user-scalable=yes')
    meta(name='author' content='sumito3478')
    meta(name='dcterms.date' content='#{updatedAt.toLocalDate}')
    title #{title}
    link(rel='icon' href='#{root}/icon.ico')
    link(rel='apple-touch-icon' href='#{root}/apple-touch-icon.png')
    link(type='application/atom+xml' rel='alternate' href='${root}/article/all.xml')
    link(rel='stylesheet' href='#{root}/style.css')
    script(src='http://code.jquery.com/jquery-1.11.1.min.js')
    :!javascript
      if (!window.u8nu)
        window.u8nu = {};
      if (!window.u8nu.estoril)
        window.u8nu.estoril = {};
      window.u8nu.estoril.shadowDOMSupported = !!HTMLElement.prototype.attachShadow;
    :!javascript
      document.addEventListener("DOMContentLoaded", function() {
        // Do not use Shadow DOM polyfill and use closed mode to make it difficult for crawlers to get the mail address,
        // although, technically, they can get every information they have in their headless browser.
        if (window.u8nu.estoril.shadowDOMSupported) {
          Array.prototype.forEach.call(document.getElementsByClassName("mailto"), function(target) {
            var addr = target.textContent.replace(' -AT- ', '@');
            var url = 'mailto:' + addr;
            var shadow = target.attachShadow({ mode: 'closed' });
            var a = document.createElement('a');
            a.setAttribute('href', url);
            a.textContent = addr;
            shadow.appendChild(a);
            var style = document.createElement('link');
            style.setAttribute('rel', 'stylesheet');
            style.setAttribute('href', '#{root}/style.css');
            shadow.appendChild(style);
          });
        }
        var highlighted = #{highlightedJSArray};
        if (highlighted.length > 0) {
          var hjs_script = document.createElement('script');
          hjs_script.setAttribute('src', 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/highlight.min.js');
          function hjs_script_onload() {
            console.log("hjs_script_onload");
            if (highlighted.length > 0) {
              var lang = highlighted.pop();
              var hjs_lang_script = document.createElement('script');
              hjs_lang_script.setAttribute('src', 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/languages/' + lang + '.min.js');
              hjs_lang_script.onload = hjs_script_onload;
              document.head.appendChild(hjs_lang_script);
            } else {
              function hljs_style() {
                var hjs_css = document.createElement('link');
                hjs_css.setAttribute('rel', 'stylesheet');
                hjs_css.setAttribute('href', 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/styles/solarized-light.min.css');
                return hjs_css;
              }
              if (!window.u8nu.estoril.shadowDOMSupported)
                document.head.appendChild(hljs_style());
              Array.prototype.forEach.call(document.querySelectorAll('pre code'), function(code) {
                var pre = code.parentNode;
                var host = document.createElement('div');
                pre.parentNode.replaceChild(host, pre);
                host.appendChild(pre);
                if (window.u8nu.estoril.shadowDOMSupported) {
                  var shadow = host.attachShadow({ mode: 'open' });
                  shadow.appendChild(hljs_style());
                  var clone = pre.cloneNode(true);
                  hljs.highlightBlock(clone);
                  shadow.appendChild(clone);
                } else {
                  hljs.highlightBlock(pre);
                }
              });
            }
          };
          hjs_script.onload = hjs_script_onload;
          document.head.appendChild(hjs_script);
        }
      });
    style
      :!plain
        @font-face {
          font-family: "EB Garamond";
          src: url("#{root}/EBGaramond12-Regular.woff2") format('woff2');
          font-display: swap;
        }
        @font-face {
          font-family: "LogoTypeGothic";
          src: url("#{root}/LogoTypeGothic.woff2") format('woff2');
          font-display: swap;
        }
        @font-face {
          font-family: "Fira Code";
          src: url("#{root}/FiraCode-Retina.woff2") format('woff2');
          font-display: swap;
        }
    :!javascript
      window.u8nu.estoril.fontDisplaySupported = function() {
        var style = document.createElement('style');
        style.textContent = "@font-face { font-display: swap; }";
        document.documentElement.appendChild(style);
        var ret = style.sheet.cssRules[0].cssText.indexOf("font-display") != -1;
        style.remove();
        return ret;
      }();
      if (window.u8nu.estoril.fontDisplaySupported) {
        document.documentElement.className += " font-loaded";
      } else {
        document.addEventListener("DOMContentLoaded", function() {
          document.documentElement.className += " font-loaded";
        });
      }
  body
    header#site-header
      h1 <a id='site-logo' href='#{root}/index.xhtml'><img src='#{root}/logo.png'/></a><a id='site-name' href='#{root}/index.xhtml'>Sine Lite Dies</a>
    - for (Content(body, metaData, tags, title, permalink, updatedAt, createdAt, urn) <- contents)
      #document-content
        header
          aside
            :!pandoc-markdown
              # [#{title}](#{root}/#{permalink})
            ul.metadata
              - for ((title, data) <- metaData)
                dt #{title}
                dd
                  :!pandoc-markdown
                    #{data}
              dt 初稿
              dd #{createdAt.toLocalDate}
              dt 最終更新日
              dd #{updatedAt.toLocalDate}
              - if (tags.nonEmpty)
                dt tags
                dd
                  - for (tag <- tags)
                    a(href='#{root}/tag/#{tag}.xhtml') #{tag}
        .body
          article
            :!pandoc-markdown
              #{body}
    aside
      h1 コメント機能について
      p
        | コメント機能は開発中です。コメントしたい場合は
        | <span class='mailto'>tomoaki3478 -AT- u8.nu</span>
        | にその旨を添えてメールしていてだければさしあたって本文中で引用します。
        | コメント機能の完成後は通常のコメントに移行します。
-# vim:set ts=2 sw=2 et:
