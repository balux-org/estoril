-@ val title: String
- import nu.u8.estoril._
- import java.time._
-@ val contents: Seq[Content]
-@ val allTags: Seq[String]
-@ val lang: String
-@ val css: String
-@ val updatedAt: ZonedDateTime
-@ val createdAt: ZonedDateTime
-@ val root: String
-@ val highlighted: Set[String]
-@ val path: String
!!! XML
!!! 5
html(xmlns='http://www.w3.org/1999/xhtml' lang='ja' xml:lang='ja')
  head
    meta(charset='utf-8')
    meta(name='generator' content='Estoril 0.0.0.10')
    meta(name='viewport' content='width=device-width, initial-scale=1.0, user-scalable=yes')
    meta(name='author' content='sumito3478')
    meta(name='dcterms.date' content='#{updatedAt.toLocalDate}')
    title #{title}
    link(type='application/atom+xml' rel='alternate' href='${root}/article/all.xml')
    link(rel='preload' href='#{root}/style.css' as='style')
    script(src='http://code.jquery.com/jquery-1.11.1.min.js')
    :!javascript
      if (!window.u8nu)
        window.u8nu = {};
      if (!window.u8nu.estoril)
        window.u8nu.estoril = {};
      window.u8nu.estoril.shadowDOMSupported = !!HTMLElement.prototype.attachShadow;
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/theme-solarized_light.js')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ext-modelist.js')
    :!javascript
      document.addEventListener("DOMContentLoaded", function() {
        // Do not use Shadow DOM polyfill and use closed mode to make it difficult for crawlers to get the mail address,
        // although, technically, they can get every information they have in their headless browser.
        if (window.u8nu.estoril.shadowDOMSupported) {
          Array.prototype.forEach.call(document.getElementsByClassName("mailto"), function(target) {
            var addr = target.textContent.replace(' -AT- ', '@');
            var url = 'mailto:' + addr;
            var shadow = target.attachShadow({ mode: 'closed' });
            var a = document.createElement('a');
            a.setAttribute('href', url);
            a.textContent = addr;
            shadow.appendChild(a);
            var style = document.createElement('link');
            style.setAttribute('rel', 'stylesheet');
            style.setAttribute('href', '#{root}/style.css');
            shadow.appendChild(style);
          });
        }
        var modelist = ace.require("ace/ext/modelist");
        var codes = Array.prototype.slice.call(document.getElementsByTagName('code'));
        var modes = {};
        codes.forEach(function (code) {
          var pre = code.parentElement
          if (pre.tagName != "pre")
            return;
          var classes = pre.className.split(/\s+/);
          var mode = null;
          classes.forEach(function(cls) {
            if (cls in modelist.modesByName)
              mode = cls;//modelist.modesByName[cls];
          });
          var numLine = code.textContent.split(/\r\n|\r|\n/).filter(function (l) { return l.length > 0; }).length;
          var host = document.createElement('div');
          host.textContent = code.textContent;
          pre.parentNode.replaceChild(host, pre);
          var editor = ace.edit(host);
          editor.setTheme("ace/theme/solarized_light");
          if (mode != null) {
            if (!(mode in modes)) {
              modes[mode] = [];
              var script = document.createElement('script');
              script.type = 'text/javascript';
              script.src = 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/mode-' + mode + '.js';
              script.onload = function () {
                modes[mode].forEach(function (f) { f(); });
              };
              document.head.appendChild(script);
            }
            modes[mode].push(function() { editor.session.setMode("ace/mode/" + mode); });
          }
          editor.setOptions({
              readOnly: true,
              highlightActiveLine: false,
              highlightGutterLine: false,
              showLineNumbers: numLine > 1, // hide line numbers for one line text.
              autoScrollEditorIntoView: true,
              showPrintMargin: true,
              maxLines: 25,
              minLines: 1,
          });
          editor.renderer.$cursorLayer.element.style.opacity = 0;
          editor.textInput.getElement().disabled = true;
          editor.commands.commmandKeyBinding = {};
        });
      });
    style
      :!plain
        @font-face {
          font-family: "EB Garamond";
          src: url("#{root}/EBGaramond12-Regular.woff2") format('woff2');
          font-display: swap;
        }
        @font-face {
          font-family: "LogoTypeGothic";
          src: url("#{root}/LogoTypeGothic.woff2") format('woff2');
          font-display: swap;
        }
        @font-face {
          font-family: "Fira Code";
          src: url("#{root}/FiraCode-Retina.woff2") format('woff2');
          font-display: swap;
        }
    :!javascript
      window.u8nu.estoril.fontDisplaySupported = function() {
        var style = document.createElement('style');
        style.textContent = "@font-face { font-display: swap; }";
        document.documentElement.appendChild(style);
        var ret = style.sheet.cssRules[0].cssText.indexOf("font-display") != -1;
        style.remove();
        return ret;
      }();
      if (window.u8nu.estoril.fontDisplaySupported) {
        document.documentElement.className += " font-loaded";
      } else {
        document.addEventListener("DOMContentLoaded", function() {
          document.documentElement.className += " font-loaded";
        });
      }
  body
    header#site-header
      h1
        a(href='#{root}/index.xhtml') Sine Lite Dies
    section
      #document-root
        #document-contents
          :!pandoc-markdown
            # #{title}
          - for (Content(body, metaData, tags, title, permalink, updatedAt, createdAt, urn) <- contents)
            #document-content
              header
                aside
                  :!pandoc-markdown
                    # [#{title}](#{root}/#{permalink})
                  ul.metadata
                    - for ((title, data) <- metaData)
                      dt #{title}
                      dd
                        :!pandoc-markdown
                          #{data}
                    dt 初稿
                    dd #{createdAt.toLocalDate}
                    dt 最終更新日
                    dd #{updatedAt.toLocalDate}
                    dt tags
                    dd
                      - for (tag <- tags)
                        a(href='#{root}/tag/#{tag}.xhtml') #{tag}
              .body
                article
                  :!pandoc-markdown
                    #{body}
        aside
          h1 コメント機能について
          p
            | コメント機能は開発中です。コメントしたい場合は
            | <span class='mailto'>tomoaki3478 -AT- u8.nu</span>
            | にその旨を添えてメールしていてだければさしあたって本文中で引用します。
            | コメント機能の完成後は通常のコメントに移行します。
        link(rel='stylesheet' href='#{root}/style.css')
-# vim:set ts=2 sw=2 et:
